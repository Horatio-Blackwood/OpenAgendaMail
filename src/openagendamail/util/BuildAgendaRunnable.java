package openagendamail;

import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import openagendamail.data.AgendaItem;
import openagendamail.data.AgendaItemProvider;
import openagendamail.file.LogFile;
import openagendamail.util.OamTools;
import org.apache.pdfbox.exceptions.COSVisitorException;
import plainpdf.Pdf;
import plainpdf.PdfFont;


/**
 * A runnable that build the agenda document from the emails.
 *
 * @author adam
 * Created:       December 30, 2012
 * Last updated:  May 4th, 2013
 */
public class BuildAgendaRunnable implements Runnable {

    /** The AgendaItemProvider to use to fetch the items to build the Agenda document using. */
    private AgendaItemProvider m_itemProvider;

    /**
     * Constructor.  Creates a new CheckMailRunnable.
     * @param provider an {@link AgendaItem} provider to use to fetch emails to build the agenda with.
     * @param deleteEmails true if the emails should be deleted after building the agenda, false otherwise.
     */
    public BuildAgendaRunnable(AgendaItemProvider provider) {
        if (provider == null){
            throw new IllegalArgumentException("Parameter 'provider' cannot be null.");
        }
        m_itemProvider = provider;
    }

    /** {@inheritDoc} */
    @Override
    public void run() {
        LogFile.getLogFile().log("Generating Agenda document.");
        generatePdfAgenda(m_itemProvider.getItems());
        LogFile.getLogFile().log("Done creating Agenda document.");
    }

    /** Generates the agenda document. */
    private static void generatePdfAgenda(Collection<AgendaItem> items){
        try {
            Pdf pdf = new Pdf(PdfFont.HELVETICA, 12);

            // Render Title of Agenda
            String title = OamTools.PROPS.getProperty("agenda.title", "Agenda");
            String sub = "This document generated By OpenAgendaMail " + OpenAgendaMail.VERSION + " on:  " + OamTools.getFormattedDateString(new Date());
            pdf.renderLine(title, PdfFont.HELVETICA_BOLD, 16);
            pdf.renderLine(sub, 9);
            pdf.insertBlankLine();

            // Render Agenda Items to PDF.
            if (!items.isEmpty()){
                // Render Each Agenda Item
                for (AgendaItem item : items){

                    // TEST LINE
                    LogFile.getLogFile().log("Rendering Agenda Item:  " + item.getTitle());

                    // Render the Header Line
                    LogFile.getLogFile().log("Rendering header.");
                    pdf.renderLine(item.getTitle(), PdfFont.HELVETICA_BOLD, 12);

                    // Render From Line
                    LogFile.getLogFile().log("Rendering from.");
                    String fromLine = "Submitted By:  " + item.getUser() + " (" + item.getEmail() +")";
                    pdf.renderLine(fromLine, 9);

                    // Skip a Line
                    LogFile.getLogFile().log("Inserting blank line.");
                    pdf.insertBlankLine();

                    // Render the Body if any.
                    LogFile.getLogFile().log("Checking body for content.");
                    if (!(item.getBody() == null || item.getBody().isEmpty())){
                        LogFile.getLogFile().log("Rendering body.");
                        pdf.renderLine(item.getBody(), 9);
                    }

                    // Skip a Line
                    LogFile.getLogFile().log("Skipping a line.");
                    pdf.insertBlankLine();
                }
            } else {
                pdf.renderLine("No items were submitted to the agenda.");
            }

            try {
                // Save PDF to disk.
                LogFile.getLogFile().log("Saving file....");
                pdf.saveAs(OamTools.PROPS.getProperty("doc.name", "agenda.pdf"));
                LogFile.getLogFile().log("Save complete.");

            } catch (COSVisitorException ex) {
                LogFile.getLogFile().log("Error while saving pdf document.", ex);
            }

        } catch (IOException ex) {
            LogFile.getLogFile().log("Error generating PDF.", ex);
        }
    }
}